package com.example.jpa.controller;

import com.example.jpa.entity.Customer;
import com.example.jpa.entity.Person;
import com.example.jpa.entity.User;
import com.example.jpa.repository.*;
import com.querydsl.jpa.impl.JPAQueryFactory;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.*;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import javax.annotation.PostConstruct;
import javax.persistence.EntityManager;
import javax.validation.constraints.NotNull;
import java.util.Collection;
import java.util.List;
import java.util.Optional;

import static org.springframework.data.domain.ExampleMatcher.GenericPropertyMatchers.endsWith;
import static org.springframework.data.domain.ExampleMatcher.GenericPropertyMatchers.startsWith;

@Api(value = "UserController", tags = {"UserController"})
@Controller // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /demo (after Application path)
public class UserController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private UserRepository userRepository;

    @Autowired
    UserDao userDao;



    @Autowired
    private EntityManager entityManager;

    //查询工厂实体
    private JPAQueryFactory queryFactory;

    //实例化控制器完成后执行该方法实例化JPAQueryFactory
    @PostConstruct
    public void initFactory()
    {
        queryFactory = new JPAQueryFactory(entityManager);
    }

    @ApiOperation(value = "增加user（多参数）", response = String.class)
    @PostMapping(path = "/add/userProperties") // Map ONLY POST Requests
    public @ResponseBody
    String addUserAndToNew(@RequestParam String name, @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }

    @ApiOperation(value = "增加user（一个对象参数）", response = String.class)
    @PostMapping(path = "/add/userObject") // Map ONLY POST Requests
    public @ResponseBody
    String addNewUser(@RequestBody User user) {
        userRepository.save(user);
        return "Saved";
    }

    @GetMapping(path = "/all")
    @ApiOperation(value = "查询所有user", response = Iterable.class)
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path = "/all/queryDsl")
    @ApiOperation(value = "查询所有user", response = List.class)
    public @ResponseBody
    List<User> getAllUsers(@RequestBody User user) {
        // 使用 QueryDSL 进行查询
//        QUser qUser = QUser.user;
//        // 定于获取条件
//        BooleanBuilder booleanBuilder = new BooleanBuilder();
//        // 要查询的条件
//        if(!StringUtils.isEmpty(user.getName())){
//            // 放入要查询的条件信息
//            booleanBuilder.and(qUser.name.contains(user.getName()));
//        }
//        // queryFactory 是上方定义的工厂实体
//        // select（生成的实体类的字段）.from（生成实体类的名称）.where（上方要查询的条件）.orderBy（排序）.fetch（）进行查询
//        return queryFactory.select(qUser)
//                .from(qUser)
//                .where(booleanBuilder)
//                .orderBy(qUser.name.desc())
//                .fetch();
        return null;
    }

    //比如查第一页，每页5个，则pageId=0，sizeId=5
    @GetMapping(path = "/page/{pageId:\\d+}/{sizeId:\\d+}")
    @ApiOperation(value = "查询指定页码和每页条数的用户", response = Iterable.class)
    public @ResponseBody
    Page<User> getAllUsers(@NotNull @PathVariable("pageId") Integer pageId, @NotNull @PathVariable("sizeId") Integer sizeId) {
        Page<User> users = userRepository.findAll(PageRequest.of(pageId, sizeId));
        return users;
    }

    @ApiOperation(value = "通过名字查询 user", response = List.class)
    @GetMapping(path = "/findUser/{name}")
    public @ResponseBody
    List<User> findUser(@PathVariable("name") String name) {
        return userRepository.findByName(name);
    }

    /*
    以下两个删除方法，如果不配置    @Transactional将报错：
      nested exception is javax.persistence.TransactionRequiredException: No EntityManager with actual transaction available for current thread - cannot reliably process 'remove' call
    */
    @ApiOperation(value = "remove user", response = List.class)
    @PutMapping(path = "/user/remove/{lastName}")
    public @ResponseBody
    List<User> removeUser(@PathVariable("lastName") String lastName) {
        return userRepository.removeByLastName(lastName);
    }

    @ApiOperation(value = "delete user", response = Long.class)
    @DeleteMapping(path = "/user/delete/{lastName}")
    @Transactional
    public @ResponseBody
    Long deleteUser(@PathVariable("lastName") String lastName) {
        return userRepository.deleteByLastName(lastName);
    }

//    @ApiOperation(value = "通过lastName查询 user【返回Page】", response = Page.class)
//    @GetMapping(path = "/findPageByLastName/{lastName}")
//    public @ResponseBody
//    Page<User> findPageByLastName(@PathVariable("lastName") String lastName) {
//        Pageable pageable = PageRequest.of(0,3);
//        return userRepository.findByLastName(lastName,pageable);
//    }
//
    @ApiOperation(value = "通过lastName查询 user【返回Slice】", response = Slice.class)
    @GetMapping(path = "/findPageByLastName/{lastName}")
    public @ResponseBody
    Slice<User> findSliceByLastName(@PathVariable("lastName") String lastName) {
        Pageable pageable = PageRequest.of(1,3);
        return userRepository.findByLastName(lastName,pageable);
    }
//    @ApiOperation(value = "通过lastName查询 user【返回List】", response = List.class)
//    @GetMapping(path = "/findByLastNameAndPageable/{lastName}")
//    public @ResponseBody
//    List<User> findByLastNameAndPageable(@PathVariable("lastName") String lastName) {
//        Pageable pageable = PageRequest.of(0,3);
//        return userRepository.findByLastName(lastName,pageable);
//    }

    @ApiOperation(value = "通过lastName查询 user【返回List】", response = List.class)
    @GetMapping(path = "/findByLastNameAndSort/{lastName}")
    public @ResponseBody
    List<User> findByLastNameAndSort(@PathVariable("lastName") String lastName) {
        return userRepository.findByLastName(lastName,Sort.by(Sort.Direction.ASC));
    }}