server:
  port: 8000
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/accessiongdatajpa?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true
    slave: # 只读DB
      url:jdbc:mysql://localhost:3306/accessiongdatajpa?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true
    username: root
    password: NoPassword4Mysql!
    driver-class-name: com.mysql.jdbc.Driver
    druid:
      # 初始化时建立物理连接的个数
      initial-size: 1
      # 最大连接池数量
      max-active: 60
      # 最小连接池数量
      min-idle: 5
      # 获取连接时最大等待时间，单位毫秒
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 连接保持空闲而不被驱逐的最小时间
      min-evictable-idle-time-millis: 300000
      # 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
      validation-query: SELECT 'x' from dual
      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-borrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-return: false

      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
      #      pool-prepared-statements: true
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      #      max-pool-prepared-statement-per-connection-size: 100

      # 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
      # 监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall
      # 多个filter之间以英文半角的逗号分隔
      filters: "stat,com.example.jpa.filter.QueryMaxSizeFilter"
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-properties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000;druid.stat.logSlowSql\=true;oracle.jdbc.ReadTimeout\=600000
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database: mysql
    database-platform: org.hibernate.dialect.MySQL5Dialect
    openInView: false
    properties:
      hibernate:
        # Initialize Lazy Proxies or Collections outside a given Transactional Persistence Context.
        enable_lazy_load_no_trans: true
        # format sql output;
        format_sql: true
        # Besides specific provider configuration, there are a number of configurations options on the Hibernate side of the integration that control various caching behaviors;
        cache:
          # Enable or disable second level caching overall.
          # By default, if the currently configured RegionFactory is not the NoCachingRegionFactory, then the second-level cache is going to be enabled.
          # Otherwise, the second-level cache is disabled.
          # 关闭二级缓存;
          use_second_level_cache: false
          # Enable or disable second level caching of query results. The default is false.
          # 关闭查询缓存;
          use_query_cache: false
        # Causes Hibernate to collect statistics for performance tuning.
        # 关闭统计调优功能; 为啥要关闭?
        generate_statistics: false
      javax:
        persistence:
          sharedCache:
            # Entities are not cached unless explicitly marked as cacheable (with the @Cacheable annotation).
            # 除非我们用cacheable明确保证需要缓存, 其他情况下针对所有的po对象都不缓存;
            mode: ENABLE_SELECTIVE
  swagger2:
    enabled: true
# Swagger
swagger:
  host: localhost
  title: SpringBoot 整合 Swagger2
  description: jpa演示
  disabled: false # 是否禁用swagger
  redirect-uri: / # 禁用swagger时的重定向地址

#spring.jpa.hibernate.ddl-auto: update
#spring.datasource.url: jdbc:mysql://localhost:3306/accessiongdatajpa?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true
#spring.datasource.username: root
#spring.datasource.password: NoPassword4Mysql!
#spring.datasource.driver-class-name: com.mysql.jdbc.Driver
